--1) How many states are there where products have been sold ?

 select count(distinct(state)) as count_state from locations

 --2) How many products are of regular type ?

 select count(product) as count_reg_product from product
 where type = 'regular'

 --3) How much spending has been done on marketing of product id 1

 select * from fact

 select sum(marketing) as marketing_spending from fact
 where productid = 1

 --4) What is the minimum sales of a product ?

 select * from fact
 select min(sales) as min_sales from fact



 --5) Display max Cost of Good Sold(COGS).

 select * from fact

 select max(cogs) as max_cogs from fact


 --6) Display the Details of the productid where product type is coffee

 select p.productid,p.product_type, f.* from product as P
 join
 fact as F
 on p.productid = f.productid


 7) Display the details where total_expenses is greater than 40.

 select * from fact
 where total_expenses > 40
 order by total_expenses

 --8) What is the average sales in Area_Code 719 ?

 select avg(sales) as average_sales from fact
where area_code = 719


--9) Find out the total profit generated by Colorado state.

select sum(f.profit) as Total_profit from fact as f
join locations as L
on f.area_code = l.area_code
where l.state = 'colorado'

--10) Display the average inventory for each product id.


select * from fact

select avg(inventory)as avg_inventory, productid  from fact
group by productid
order by productid  



--11) Display state in a sequential order in a location table.

select distinct(l.state) from locations as l
order by l.state

--12) Display the average budget margin of the store where average budget margin should be
--greater than 100.

select * from fact

select area_code, avg(Budget_Margin) as avg_budget  from fact
--where avg_budget > 100
group by area_code
having avg(Budget_Margin) > 100
order by area_code

--13) What is the total sales done on date 2010-01-01

select sum(sales) as total_sales from fact
where date = '2010-01-01'


--14) Display the average total expense of each product id on individual date

select date,productID, avg(total_expenses) as total_kharcha from fact
group by date, productid
order by date, productid

--15) Display the table with the following attributes such as
--Date, productid, product_type, product, Sales, profit, state, area_code

select * from fact
select * from locations
select * from product


select f.Date, f.productid, p.product_type, p.product, f.Sales, f.profit, l.state, l.area_code
from fact as F
inner join 
locations as L
on F.area_code = L.area_code
inner join 
product as P
on P.productid = F.productid


--16) Display the rank without any gap to show the Sales wise rank.


select sales,DENSE_RANK() over(order by sales desc) as DRank from fact


--17) Find the State wise Profit and Sales.

select sum(f.profit) as profits, sum(f.sales)as sales, l.state  from fact as F
inner join
locations as L
on f.area_code = l.area_code
group by l.state

--18) Find the State wise Profit and Sales along with the Product Name.


select l.state,p.product,sum(f.profit) as profits, sum(f.sales)as sales  from fact as F
inner join
locations as L
on f.area_code = l.area_code
inner join
product as p
on p.productid = f.productid

group by l.state, p.product



----19) If there is an increase in sales of 5%. Calculate the increased sales.
select sales,(sales + sales*0.05) as increasedSales
from fact


--20) Find the maximum profit along with the Product id and Product Type.

select f.productid,p.product_type,max(f.profit) as maxProfit from fact as f
inner join
product as p
on f.productid = p.productid
group by f.productid,p.product_type
order by maxProfit desc


--21) Create a Stored Procedure to fetch the result according to the product type from Product.
create proc proc_product @type varchar(20)
as
select * from product where product_type = @type


exec proc_product 'tea'

--22) Write a query by creating a condition in which if the total expenses is less than 60 then it is a
--profit or else loss.

select productid, total_expenses, iif(total_expenses < 60, 'profit', 'loss') as comments from fact



--23) Give the total  sales value with the Date and productid details. Use roll-up to pull the
--data in hierarchical order.

select date, productid, sum(sales) as total_sales from fact
group by rollup( date, productid)
order by date, productid


--24) Apply union and intersection operator on the tables which consist of attribute area code.

select area_code from fact
union
select area_code from locations


select area_code from fact
intersect
select area_code from locations


--25) Create a user-defined function for the product table to fetch a particular product type based
--upon the user’s preference.

create function prod_type1(@type varchar(20))
returns table

return (
select * from product where product_type = @type)

select * from prod_type1 ('coffee')



--26) Change the product type from coffee to tea where product id is 1 and undo it.

update product set product_type = 'tea' where product_type = 'coffee'

--27) Display the Date, productid and sales where total expenses are between 100 to 20

select date, productid, sales from fact
where total_expenses between 20 and 100
order by  date

--28) Delete the records in the product table for regular type.

begin transaction

delete product where Type = 'regular'

rollback transaction

--29) Display the ASCII value of the fifth character from the column product

select product, substring(product,5,1) as characters, ASCII(substring(product,5,1)) as ASCII
from product